{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "$id": "https://velocitynetwork.foundation/schemas/open-badge-credential",
  "title": "Open badge",
  "description": "Open badge v3.0",
  "$defs": {
    "Alignment": {
      "description": "Describes an alignment between an achievement and a node in an educational framework.",
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Alignment'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string",
              "maxLength": 2000
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Alignment'.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string",
                "maxLength": 2000
              }
            }
          ]
        },
        "targetCode": {
          "description": "If applicable, a locally unique string identifier that identifies the alignment target within its framework and/or targetUrl.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 256
        },
        "targetDescription": {
          "description": "Short description of the alignment target.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 1024
        },
        "targetName": {
          "description": "Name of the alignment.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 256
        },
        "targetFramework": {
          "description": "Name of the framework the alignment target.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 256
        },
        "targetType": {
          "description": "The type of the alignment target node.",
          "$comment": "Origin: AlignmentTargetType (EnumExt); The type of the alignment target node in the target framework.",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "ceasn:Competency",
                "ceterms:Credential",
                "CFItem",
                "CFRubric",
                "CFRubricCriterion",
                "CFRubricCriterionLevel",
                "CTDL"
              ]
            },
            {
              "type": "string",
              "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+",
              "maxLength": 256
            }
          ]
        },
        "targetUrl": {
          "description": "URL linking to the official description of the alignment target, for example an individual standard within an educational framework.",
          "$comment": "Origin: URL (DerivedType); A `URI` that represents a Uniform Resource Locator (URL).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        }
      },
      "required": [
        "type",
        "targetName",
        "targetUrl"
      ],
      "additionalProperties": true
    },
    "Criteria": {
      "description": "Descriptive metadata about the achievements necessary to be recognized with an assertion of a particular achievement. This data is added to the Achievement class so that it may be rendered when the achievement assertion is displayed, instead of simply a link to human-readable criteria external to the achievement. Embedding criteria allows either enhancement of an external criteria page or increased portability and ease of use by allowing issuers to skip hosting the formerly-required external criteria page altogether. Criteria is used to allow would-be recipients to learn what is required of them to be recognized with an assertion of a particular achievement. It is also used after the assertion is awarded to a recipient to let those inspecting earned achievements know the general requirements that the recipients met in order to earn it.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The URI of a webpage that describes in a human-readable format the criteria for the achievement.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "narrative": {
          "description": "A narrative of what is needed to earn the achievement. Markdown is allowed.",
          "$comment": "Origin: Markdown (DerivedType); A `String` that may contain Markdown.",
          "type": "string",
          "maxLength": 1024
        }
      },
      "required": [],
      "additionalProperties": true
    },
    "EndorsementCredential": {
      "description": "A verifiable credential that asserts a claim about an entity. As described in [[[#data-integrity]]], at least one proof mechanism, and the details necessary to evaluate that proof, MUST be expressed for a credential to be a verifiable credential. In the case of an embedded proof, the credential MUST append the proof in the `proof` property.",
      "type": "object",
      "properties": {
        "@context": {
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "The value of the `@context` property MUST be an ordered set where the first item is a URI with the value 'https://www.w3.org/2018/credentials/v1', and the second item is a URI with the value 'https://purl.imsglobal.org/spec/ob/v3p0/context/ob_v3p0.jsonld'.",
            "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
            "type": "string",
            "format": "uri",
            "maxLength": 2000
          }
        },
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementCredential'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string",
              "maxLength": 2000
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementCredential'.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string",
                "maxLength": 2000
              }
            }
          ]
        },
        "id": {
          "description": "Unambiguous reference to the credential.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "credentialSubject": {
          "$ref": "#/$defs/EndorsementSubject"
        },
        "issuer": {
          "$ref": "#/$defs/Profile"
        },
        "issuanceDate": {
          "description": "Timestamp of when the credential was awarded.",
          "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
          "type": "string",
          "format": "date-time"
        },
        "expirationDate": {
          "description": "If the credential has some notion of expiry, this indicates a timestamp when a credential should no longer be considered valid. After this time, the credential should be considered expired.",
          "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
          "type": "string",
          "format": "date-time"
        },
        "proof": {
          "oneOf": [
            {
              "$ref": "#/$defs/Proof"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Proof"
              }
            }
          ]
        },
        "credentialSchema": {
          "oneOf": [
            {
              "$ref": "#/$defs/CredentialSchema"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CredentialSchema"
              }
            }
          ]
        },
        "credentialStatus": {
          "$ref": "#/$defs/CredentialStatus"
        },
        "refreshService": {
          "$ref": "#/$defs/RefreshService"
        }
      },
      "required": [
        "@context",
        "type",
        "id",
        "credentialSubject",
        "issuer",
        "issuanceDate"
      ],
      "additionalProperties": false
    },
    "CredentialStatus": {
      "description": "The information in CredentialStatus is used to discover information about the current status of a verifiable credential, such as whether it is suspended or revoked.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The value MUST be the URL of the issuer's credential status method.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "description": "The name of the credential status method.",
          "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
          "type": "string",
          "maxLength": 2000
        }
      },
      "required": [
        "id",
        "type"
      ],
      "additionalProperties": true
    },
    "IdentifierEntry": {
      "description": "No description supplied.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'IdentifierEntry'.",
          "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
          "type": "string",
          "maxLength": 2000
        },
        "identifier": {
          "description": "An identifier.",
          "$comment": "Origin: Identifier (DerivedType); A `NormalizedString` that functions as an identifier.",
          "type": "string",
          "maxLength": 64
        },
        "identifierType": {
          "description": "The identifier type.",
          "$comment": "Origin: IdentifierTypeEnum (EnumExt)",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "sourcedId",
                "systemId",
                "productId",
                "userName",
                "accountId",
                "emailAddress",
                "nationalIdentityNumber",
                "isbn",
                "issn",
                "lisSourcedId",
                "oneRosterSourcedId",
                "sisSourcedId",
                "ltiContextId",
                "ltiDeploymentId",
                "ltiToolId",
                "ltiPlatformId",
                "ltiUserId",
                "identifier"
              ]
            },
            {
              "type": "string",
              "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+",
              "maxLength": 32
            }
          ]
        }
      },
      "required": [
        "type",
        "identifier",
        "identifierType"
      ],
      "additionalProperties": false
    },
    "Proof": {
      "description": "A JSON-LD Linked Data proof.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Signature suite used to produce proof.",
          "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
          "type": "string",
          "maxLength": 2000
        },
        "created": {
          "description": "Date the proof was created.",
          "$comment": "Origin: DateTime (PrimitiveType); An [[ISO8601]] time using the syntax YYYY-MM-DDThh:mm:ss.",
          "type": "string",
          "format": "date-time"
        },
        "challenge": {
          "description": "A value chosen by the verifier to mitigate authentication proof replay attacks.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 128
        },
        "domain": {
          "description": "The domain of the proof to restrict its use to a particular target.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 256
        },
        "nonce": {
          "description": "A value chosen by the creator of proof to randomize proof values for privacy purposes.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 128
        },
        "proofPurpose": {
          "description": "The purpose of the proof to be used with `verificationMethod`. MUST be 'assertionMethod'.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 32
        },
        "proofValue": {
          "description": "Value of the proof.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength":8192
        },
        "verificationMethod": {
          "description": "The URL of the public key that can verify the signature.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": true
    },
    "RefreshService": {
      "description": "The information in RefreshService is used to refresh the verifiable credential.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The value MUST be the URL of the issuer's refresh service.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "description": "The name of the refresh service method.",
          "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
          "type": "string",
          "maxLength": 2000
        }
      },
      "required": [
        "id",
        "type"
      ],
      "additionalProperties": true
    },
    "Image": {
      "description": "Metadata about images that represent assertions, achieve or profiles. These properties can typically be represented as just the id string of the image, but using a fleshed-out document allows for including captions and other applicable metadata.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The URI or Data URI of the image.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "description": "MUST be the IRI 'Image'.",
          "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
          "type": "string",
          "maxLength": 2000
        },
        "caption": {
          "description": "The caption for the image.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 256
        }
      },
      "required": [
        "id",
        "type"
      ],
      "additionalProperties": false
    },
    "ResultDescription": {
      "description": "Describes a possible achievement result.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique URI for this result description. Required so a result can link to this result description.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'ResultDescription'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string",
              "maxLength": 2000
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'ResultDescription'.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string",
                "maxLength": 2000
              }
            }
          ]
        },
        "alignment": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Alignment"
          }
        },
        "allowedValue": {
          "type": "array",
          "items": {
            "description": "An ordered list of allowed values. The values should be ordered from low to high as determined by the achievement creator.",
            "$comment": "Origin: String (PrimitiveType); Character strings.",
            "type": "string",
            "maxLength": 64
          }
        },
        "name": {
          "description": "The name of the result.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 256
        },
        "requiredLevel": {
          "description": "The `id` of the rubric criterion level required to pass as determined by the achievement creator.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "requiredValue": {
          "description": "A value from `allowedValue` or within the range of `valueMin` to `valueMax` required to pass as determined by the achievement creator.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 64
        },
        "resultType": {
          "description": "The type of result this description represents. This is an extensible enumerated vocabulary.",
          "$comment": "Origin: ResultType (EnumExt); The type of result. This is an extensible enumerated vocabulary. Extending the vocabulary makes use of a naming convention.",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "GradePointAverage",
                "LetterGrade",
                "Percent",
                "PerformanceLevel",
                "PredictedScore",
                "RawScore",
                "Result",
                "RubricCriterion",
                "RubricCriterionLevel",
                "RubricScore",
                "ScaledScore",
                "Status"
              ]
            },
            {
              "type": "string",
              "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+",
              "maxLength": 64
            }
          ]
        },
        "rubricCriterionLevel": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/RubricCriterionLevel"
          }
        },
        "valueMax": {
          "description": "The maximum possible `value` that may be asserted in a linked result.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 64
        },
        "valueMin": {
          "description": "The minimum possible `value` that may be asserted in a linked result.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 64
        }
      },
      "required": [
        "id",
        "type",
        "name",
        "resultType"
      ],
      "additionalProperties": true
    },
    "RubricCriterionLevel": {
      "description": "Describes a rubric criterion level.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique URI for this rubric criterion level. Required so a result can link to this rubric criterion level.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'RubricCriterionLevel'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string",
              "maxLength": 2000
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'RubricCriterionLevel'.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string",
                "maxLength": 2000
              }
            }
          ]
        },
        "alignment": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Alignment"
          }
        },
        "description": {
          "description": "Description of the rubric criterion level.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 2048
        },
        "level": {
          "description": "The rubric performance level in terms of success.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 64
        },
        "name": {
          "description": "The name of the rubric criterion level.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 128
        },
        "points": {
          "description": "The points associated with this rubric criterion level.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 32
        }
      },
      "required": [
        "id",
        "type",
        "name"
      ],
      "additionalProperties": true
    },
    "EndorsementSubject": {
      "description": "A collection of information about the subject of the endorsement.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier of the individual, entity, organization, assertion, or achievement that is endorsed.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementSubject'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string",
              "maxLength": 2000
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementSubject'.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string",
                "maxLength": 2000
              }
            }
          ]
        },
        "endorsementComment": {
          "description": "Allows endorsers to make a simple claim in writing about the entity.",
          "$comment": "Origin: Markdown (DerivedType); A `String` that may contain Markdown.",
          "type": "string",
          "maxLength": 1024
        }
      },
      "required": [
        "id",
        "type"
      ],
      "additionalProperties": false
    },
    "Related": {
      "description": "Identifies a related achievement.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The related achievement.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Related'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string",
              "maxLength": 2000
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Related'.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string",
                "maxLength": 2000
              }
            }
          ]
        },
        "@language": {
          "description": "The language of the related achievement.",
          "$comment": "Origin: LanguageCode (DerivedType); A language code [[BCP47]].",
          "type": "string",
          "pattern": "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$"
        },
        "version": {
          "description": "The version of the related achievement.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 32
        }
      },
      "required": [
        "id",
        "type"
      ],
      "additionalProperties": false
    },
    "Profile": {
      "description": "A Profile is a collection of information that describes the entity or organization using Open Badges. Issuers must be represented as Profiles, and recipients, endorsers, or other entities may also be represented using this vocabulary. Each Profile that represents an Issuer may be referenced in many BadgeClasses that it has defined. Anyone can create and host an Issuer file to start issuing Open Badges. Issuers may also serve as recipients of Open Badges, often identified within an Assertion by specific properties, like their url or contact email address.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique URI for the Issuer/Profile file.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Profile'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string",
              "maxLength": 2000
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Profile'.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string",
                "maxLength": 2000
              }
            }
          ]
        },
        "name": {
          "description": "The name of the entity or organization.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 256
        },
        "url": {
          "description": "The homepage or social media profile of the entity, whether individual or institutional. Should be a URL/URI Accessible via HTTP.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "phone": {
          "description": "A phone number.",
          "$comment": "Origin: PhoneNumber (DerivedType); A `NormalizedString` representing a phone number.",
          "type": "string",
          "maxLength": 15
        },
        "description": {
          "description": "A short description of the issuer entity or organization.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 2048
        },
        "endorsement": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/EndorsementCredential"
          }
        },
        "endorsementJwt": {
          "type": "array",
          "items": {
            "description": "Allows endorsers to make specific claims about the individual or organization represented by this profile. These endorsements are signed with the VC-JWT proof format.",
            "$comment": "Origin: CompactJws (DerivedType); A `String` in Compact JWS format [[RFC7515]].",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+$",
            "maxLength": 8096
          }
        },
        "image": {
          "oneOf": [
            {
              "description": "The URI or Data URI of the image.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that represents a Uniform Resource Identifier (URI).",
              "type": "string",
              "format": "uri",
              "maxLength": 2000
            },
            {
              "$ref": "#/$defs/Image"
            }
          ]
        },
        "email": {
          "description": "An email address.",
          "$comment": "Origin: EmailAddress (DerivedType); A `NormalizedString` representing an email address.",
          "type": "string",
          "format": "email",
          "maxLength": 256
        },
        "address": {
          "$ref": "#/$defs/Address"
        },
        "otherIdentifier": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/IdentifierEntry"
          }
        },
        "official": {
          "description": "If the entity is an organization, `official` is the name of an authorized official of the organization.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 256
        },
        "parentOrg": {
          "$ref": "#/$defs/Profile"
        },
        "familyName": {
          "description": "Family name. In the western world, often referred to as the 'last name' of a person.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 64
        },
        "givenName": {
          "description": "Given name. In the western world, often referred to as the 'first name' of a person.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 64
        },
        "additionalName": {
          "description": "Additional name. Includes what is often referred to as 'middle name' in the western world.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 128
        },
        "patronymicName": {
          "description": "Patronymic name.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 64
        },
        "honorificPrefix": {
          "description": "Honorific prefix(es) preceding a person's name (e.g. 'Dr', 'Mrs' or 'Mr').",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 8
        },
        "honorificSuffix": {
          "description": "Honorific suffix(es) following a person's name (e.g. 'M.D, PhD').",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 16
        },
        "familyNamePrefix": {
          "description": "Family name prefix. As used in some locales, this is the leading part of a family name (e.g. 'de' in the name 'de Boer').",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 8
        },
        "dateOfBirth": {
          "description": "No description supplied.",
          "$comment": "Origin: Date (PrimitiveType); An [[ISO8601]] calendar date using the syntax YYYY-MM-DD.",
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "id",
        "type"
      ],
      "additionalProperties": true
    },
    "Address": {
      "description": "An address for the described entity.",
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Address'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string",
              "maxLength": 2000
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Address'.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string",
                "maxLength": 2000
              }
            }
          ]
        },
        "addressCountry": {
          "description": "A country.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 32
        },
        "addressCountryCode": {
          "description": "A country code. The value must be a ISO 3166-1 alpha-2 country code [[ISO3166-1]].",
          "$comment": "Origin: CountryCode (DerivedType); A two-digit ISO 3166-1 alpha-2 country code [[ISO3166-1]].",
          "type": "string",
          "maxLength": 2,
          "pattern": "^[A-Z]{2}$"
        },
        "addressRegion": {
          "description": "A region within the country.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 6
        },
        "addressLocality": {
          "description": "A locality within the region.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 256
        },
        "streetAddress": {
          "description": "A street address within the locality.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 512
        },
        "postOfficeBoxNumber": {
          "description": "A post office box number for PO box addresses.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 16
        },
        "postalCode": {
          "description": "A postal code.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 32
        },
        "geo": {
          "$ref": "#/$defs/GeoCoordinates"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "GeoCoordinates": {
      "description": "The geographic coordinates of a location.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'GeoCoordinates'.",
          "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
          "type": "string",
          "maxLength": 2000
        },
        "latitude": {
          "description": "The latitude of the location [[WGS84]].",
          "$comment": "Origin: Float (PrimitiveType)",
          "type": "number"
        },
        "longitude": {
          "description": "The longitude of the location [[WGS84]].",
          "$comment": "Origin: Float (PrimitiveType)",
          "type": "number"
        }
      },
      "required": [
        "type",
        "latitude",
        "longitude"
      ],
      "additionalProperties": false
    },
    "CredentialSchema": {
      "description": "Identify the type and location of a data schema.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The value MUST be a URI identifying the schema file. One instance of `CredentialSchema` MUST have an `id` that is the URL of the JSON Schema for this credential defined by this specification.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "description": "The value MUST identify the type of data schema validation. One instance of `CredentialSchema` MUST have a `type` of 'JsonSchemaValidator2019'.",
          "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
          "type": "string",
          "maxLength": 2000
        }
      },
      "required": [
        "id",
        "type"
      ],
      "additionalProperties": true
    }
  },
  "type": "object",
  "required": [
    "achievement"
  ],
  "properties": {
    "type": {
      "type": "string",
      "maxLength": 2000
    },
    "achievement": {
      "title": "JSON Schema for the Achievement class.",
      "description": "A collection of information about the accomplishment recognized by the Assertion. Many assertions may be created corresponding to one Achievement.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique URI for the Achievement.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string",
          "format": "uri",
          "maxLength": 2000
        },
        "type": {
          "oneOf": [
            {
              "description": "No description supplied.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string",
              "maxLength": 2000
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "No description supplied.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string",
                "minLength": 1,
                "maxLength": 2000
              }
            }
          ]
        },
        "alignment": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Alignment"
          }
        },
        "achievementType": {
          "description": "The type of achievement. This is an extensible vocabulary.",
          "$comment": "Origin: AchievementType (EnumExt); The type of achievement, for example 'Award' or 'Certification'. This is an extensible enumerated vocabulary. Extending the vocabulary makes use of a naming convention.",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "Achievement",
                "ApprenticeshipCertificate",
                "Assessment",
                "Assignment",
                "AssociateDegree",
                "Award",
                "Badge",
                "BachelorDegree",
                "Certificate",
                "CertificateOfCompletion",
                "Certification",
                "CommunityService",
                "Competency",
                "Course",
                "CoCurricular",
                "Degree",
                "Diploma",
                "DoctoralDegree",
                "Fieldwork",
                "GeneralEducationDevelopment",
                "JourneymanCertificate",
                "LearningProgram",
                "License",
                "Membership",
                "ProfessionalDoctorate",
                "QualityAssuranceCredential",
                "MasterCertificate",
                "MasterDegree",
                "MicroCredential",
                "ResearchDoctorate",
                "SecondarySchoolDiploma"
              ]
            },
            {
              "type": "string",
              "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+",
              "maxLength": 64
            }
          ]
        },
        "creator": {
          "$ref": "#/$defs/Profile"
        },
        "creditsAvailable": {
          "description": "Credit hours associated with this entity, or credit hours possible. For example 3.0.",
          "$comment": "Origin: Float (PrimitiveType)",
          "type": "number"
        },
        "criteria": {
          "$ref": "#/$defs/Criteria"
        },
        "description": {
          "description": "A short description of the achievement.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "minLength": 1,
          "maxLength": 2048
        },
        "endorsement": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/EndorsementCredential"
          }
        },
        "endorsementJwt": {
          "type": "array",
          "items": {
            "description": "Allows endorsers to make specific claims about the Achievement. These endorsements are signed with the VC-JWT proof format.",
            "$comment": "Origin: CompactJws (DerivedType); A `String` in Compact JWS format [[RFC7515]].",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+$",
            "maxLength": 8128
          }
        },
        "fieldOfStudy": {
          "description": "Category, subject, area of study, discipline, or general branch of knowledge. Examples include Business, Education, Psychology, and Technology.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 64
        },
        "humanCode": {
          "description": "The code, generally human readable, associated with an achievement.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 32
        },
        "image": {
          "oneOf": [
            {
              "description": "The URI or Data URI of the image.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that represents a Uniform Resource Identifier (URI).",
              "type": "string",
              "format": "uri",
              "maxLength": 2000
            },
            {
              "$ref": "#/$defs/Image"
            }
          ]
        },
        "@language": {
          "description": "The language of the achievement.",
          "$comment": "Origin: LanguageCode (DerivedType); A language code [[BCP47]].",
          "type": "string",
          "pattern": "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$"
        },
        "name": {
          "description": "The name of the achievement.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "otherIdentifier": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/IdentifierEntry"
          }
        },
        "related": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Related"
          }
        },
        "resultDescription": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ResultDescription"
          }
        },
        "specialization": {
          "description": "Name given to the focus, concentration, or specific area of study defined in the achievement. Examples include 'Entrepreneurship', 'Technical Communication', and 'Finance'.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 128
        },
        "tag": {
          "type": "array",
          "items": {
            "description": "Tags that describes the type of achievement.",
            "$comment": "Origin: String (PrimitiveType); Character strings.",
            "type": "string",
            "maxLength": 64
          }
        },
        "version": {
          "description": "The version property allows issuers to set a version string for an Achievement. This is particularly useful when replacing a previous version with an update.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string",
          "maxLength": 32
        }
      },
      "required": [
        "id",
        "type",
        "criteria",
        "description",
        "name"
      ],
      "additionalProperties": true
    }
  },
  "examples": [
    {
      "type": "AchievementSubject",
      "achievement": {
        "type": "Achievement",
        "name": "Our Wallet Passed JFF Plugfest #1 2022",
        "description": "This wallet can display this Open Badge 3.0",
        "criteria": {
          "type": "Criteria",
          "narrative": "The first cohort of the JFF Plugfest 1 in May/June of 2021 collaborated to push interoperability of VCs in education forward."
        },
        "image": "https://w3c-ccg.github.io/vc-ed/plugfest-1-2022/images/plugfest-1-badge-image.png"
      }
    },
    {
      "type": "AchievementSubject",
      "achievement": {
        "type": "Achievement",
        "name": "Influenza Vaccine Immunization Education (IVIE)",
        "description": "Influenza Vaccine Immunization Education (IVIE) is a self-guided learning module for nursing students to gain training specific to the administration of influenza vaccine in organized clinics for communities of people",
        "criteria": {
          "type": "Criteria",
          "narrative": "https://example.com/ivie/criteria.html"
        },
        "alignment": [
          {
            "targetName": "North Dakota Medical Education Profile 3",
            "targetUrl": "http://credentialengine.com",
            "targetCode": "NDMEP3"
          }
        ],
        "image": "http://example.com/ivie.png"
      }
    }
  ]
}